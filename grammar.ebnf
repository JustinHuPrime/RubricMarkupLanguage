(*
Within a line, whitespace may not come before a statement
All statements and expressions may have any kind of enclosed whitespace
*)

file = { statement }, { line } ;
line = { plain_text | expression }, ? newline ? ;

plain_text = ? any text not including "$" but allowing "$$" ? ;

statement = "$", statement_body ;
statement_body = "config", "newline_collapse", boolean_literal
               | "input", input_spec, [ "prompt", string_literal ], "to", identifier, [ "if", expression_body, "else", expression_body ]
               | "let", identifier, "=", expression_body
;

expression = "${", expression_body "}" ;
expression_body = logical_expression
                | logical_expression, "?", expression, ":", logical_expression
;
logical_expression = equality_expression, { ( "&&" | "||" ), equality_expression } ;
equality_expression = comparison_expression, { ( "==" | "!=" ), comparison_expression } ;
comparison_expression = addition_expression, { ( "<" | ">" | "<=" | ">=" ), addition_expression } ;
addition_expression = multiplication_expression, { ( "+" | "-" ), multiplication_expression } ;
multiplication_expression = prefix_expression, { ( "*" | "/" | "%" ), prefix_expression } ;
prefix_expression = primary_expression
                  | "-", primary_expression
                  | "!", primary_expression
;
primary_expression = identifier
                   | boolean_literal
                   | number_literal
                   | string_literal
                   | grade_literal
                   | "(", expression_body, ")"
                   | "floor", "(", expression_body, ")"
                   | "ceil", "(", expression_body, ")"
                   | "round", "(", expression_body, ")"
;

identifier = ? any valid C identifier excluding keywords ?;

type = "boolean"
     | "number"
     | "string"
     | "grade", "(", number_literal, ")"
;

boolean_literal = "true" | "false" ;
number_literal = ? any decimal number possibly with sign ? ;
string_literal = ? any quote-enclosed string literal possibly involving the escape sequences \n, \t, \" and \\ ? ;
grade_literal = number_literal "//" number_literal ;