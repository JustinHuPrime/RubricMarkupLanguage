(*
A statement marker must be at the start of line
All statements and expressions may not have newlines in them, but may have other whitespace
Blank lines between statements and lines are ignored, even when newline collapse is false
*)

file = { statement | comment }, { line } ;
line = { plain_text | expression }, ? newline ? ;

plain_text = ? any text not including "$" but allowing "$$" ? ;

comment = "$#", ? anything excluding newline ? ;
statement = "$", statement_body ;
statement_body = "config", "newline_collapse", boolean_literal
               | "input", type, [ "prompt", expression ], "to", identifier, [ "if", expression_body, "else", expression_body ]
               | "let", identifier, "=", expression_body
;
(*
TODO: change input stmt to
"input", [ "if", expression_body, "else", expression_body ], type, [ "prompt", expression ], "to", identifier
*)

expression = "${", expression_body "}" ;
expression_body = logical_expression
                | logical_expression, "?", expression_body, ":", expression_body
;
logical_expression = equality_expression, { ( "&&" | "||" ), equality_expression } ;
equality_expression = comparison_expression, { ( "==" | "!=" ), comparison_expression } ;
comparison_expression = addition_expression, { ( "<" | ">" | "<=" | ">=" ), addition_expression } ;
addition_expression = multiplication_expression, { ( "+" | "-" ), multiplication_expression } ;
multiplication_expression = prefix_expression, { ( "*" | "/" | "%" | "//" ), prefix_expression } ;
prefix_expression = primary_expression
                  | "-", primary_expression
                  | "!", primary_expression
;
primary_expression = identifier
                   | boolean_literal
                   | number_literal
                   | string_literal
                   | "(", expression_body, ")"
                   | "floor", "(", expression_body, ")"
                   | "ceil", "(", expression_body, ")"
                   | "round", "(", expression_body, ")"
                   | "to_string", "(", expression_body, ")"
                   | "to_number", "(", expression_body, ")"
;

identifier = ? any valid C identifier excluding keywords ?;

type = "boolean"
     | "number"
     | "string"
     | "grade", "//", expression
;

boolean_literal = "true" | "false" ;
number_literal = ? any decimal number ? ;
string_literal = ? any quote-enclosed string literal possibly involving the escape sequences \n, \t, \" and \\ ? ;
